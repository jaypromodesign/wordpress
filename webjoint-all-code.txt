Here is the current file structure:
/webjoint-sync/
    webjoint-sync.php
    /includes/
        admin-settings.php
        api-handler.php
        cron-handler.php
        error-handler.php
	order-handler.php
	user-handler.php
	cart-handler.php
	product-handler.php
	data-mapper.php
    /assets/
        /js/
            admin.js









Here is the code for webjoint-sync.php:
<?php
/*
Plugin Name: WebJoint Sync
Description: This plugin synchronizes data with the WebJoint API
Version: 1.0
Author: Your Name
*/

// If this file is called directly, abort.
if (!defined('WPINC')) {
    die;
}

// Define plugin paths for easy access
define('WEBJOINT_SYNC_PATH', plugin_dir_path(__FILE__));
define('WEBJOINT_SYNC_INC_PATH', WEBJOINT_SYNC_PATH . 'includes/');

// Load all the necessary files
require_once(WEBJOINT_SYNC_INC_PATH . 'admin-settings.php');
require_once(WEBJOINT_SYNC_INC_PATH . 'api-handler.php');
require_once(WEBJOINT_SYNC_INC_PATH . 'cron-handler.php');
require_once(WEBJOINT_SYNC_INC_PATH . 'error-handler.php');
require_once(WEBJOINT_SYNC_INC_PATH . 'order-handler.php');
require_once(WEBJOINT_SYNC_INC_PATH . 'user-handler.php');
require_once(WEBJOINT_SYNC_INC_PATH . 'cart-handler.php');
require_once(WEBJOINT_SYNC_INC_PATH . 'product-handler.php');
require_once(WEBJOINT_SYNC_INC_PATH . 'data-mapper.php');

// Initialize our plugin
function webjoint_sync_init() {
    // Setting up custom intervals for wp-cron
    add_filter('cron_schedules', 'webjoint_sync_cron_intervals');
}

// This function adds custom intervals to wp-cron
function webjoint_sync_cron_intervals($schedules) {
    $schedules['every_minute'] = array(
            'interval' => 60,
            'display'  => __('Every Minute'),
        );
        $schedules['every_five_minutes'] = array(
            'interval' => 300,
            'display'  => __('Every 5 Minutes'),
        );
        $schedules['every_ten_minutes'] = array(
            'interval' => 600,
            'display'  => __('Every 10 Minutes'),
        );
        $schedules['every_fifteen_minutes'] = array(
            'interval' => 900,
            'display'  => __('Every 15 Minutes'),
        );
        $schedules['every_twenty_minutes'] = array(
            'interval' => 1200,
            'display'  => __('Every 20 Minutes'),
        );
        $schedules['every_twenty_five_minutes'] = array(
            'interval' => 1500,
            'display'  => __('Every 25 Minutes'),
        );
        $schedules['every_half_hour'] = array(
            'interval' => 1800,
            'display'  => __('Every 30 Minutes'),
        );
	$schedules['every_hour'] = array(
            'interval' => 3600,
            'display'  => __('Every 1 Hour'),
        );

    return $schedules;
}

// Hook our function into the init action
add_action('init', 'webjoint_sync_init');

// Plugin activation
function webjoint_sync_activate() {
    // Schedule synchronization
    webjoint_sync_schedule_event();
}
register_activation_hook(__FILE__, 'webjoint_sync_activate');

// Plugin deactivation
function webjoint_sync_deactivate() {
    // Unschedule synchronization
    webjoint_sync_unschedule_event();
}
register_deactivation_hook(__FILE__, 'webjoint_sync_deactivate');

?>









Here is the code for admin-settings.php:
<?php

// If this file is called directly, abort.
if (!defined('WPINC')) {
    die;
}

// Create custom plugin settings menu
add_action('admin_menu', 'webjoint_sync_create_menu');

function webjoint_sync_create_menu() {
    // Create new top-level menu
    add_menu_page('WebJoint Sync Settings', 'WebJoint Sync', 'administrator', __FILE__, 'webjoint_sync_settings_page' , plugins_url('/images/icon.png', __FILE__) );

    // Call register settings function
    add_action('admin_init', 'register_webjoint_sync_settings');
}

function register_webjoint_sync_settings() {
    // Register settings with validation callbacks
    register_setting('webjoint-sync-settings-group', 'api_key', 'validate_api_key');
    register_setting('webjoint-sync-settings-group', 'facility_id', 'validate_facility_id');
    register_setting('webjoint-sync-settings-group', 'sync_interval', 'validate_sync_interval');
}

// Validation functions
function validate_api_key($input) {
    // Replace this with your actual API key validation logic
    if (/* validation fails */) {
        add_settings_error('api_key', 'api_key_error', 'Invalid API Key');
        return get_option('api_key');
    }
    return $input;
}

function validate_facility_id($input) {
    // Replace this with your actual Facility ID validation logic
    if (/* validation fails */) {
        add_settings_error('facility_id', 'facility_id_error', 'Invalid Facility ID');
        return get_option('facility_id');
    }
    return $input;
}

function validate_sync_interval($input) {
    $allowed_values = array('60', '300', '600', '900', '1200', '1500', '1800', '3600');
    if (!in_array($input, $allowed_values)) {
        add_settings_error('sync_interval', 'sync_interval_error', 'Invalid Sync Interval');
        return get_option('sync_interval');
    }
    return $input;
}

function webjoint_sync_settings_page() {
?>
<div class="wrap">
<h1>WebJoint Sync</h1>

<form method="post" action="options.php">
    <?php settings_fields('webjoint-sync-settings-group'); ?>
    <?php do_settings_sections('webjoint-sync-settings-group'); ?>
    <table class="form-table">
        <tr valign="top">
        <th scope="row">API Key</th>
        <td><input type="text" name="api_key" value="<?php echo esc_attr(get_option('api_key')); ?>" /></td>
        </tr>
         
        <tr valign="top">
        <th scope="row">Facility ID</th>
        <td><input type="text" name="facility_id" value="<?php echo esc_attr(get_option('facility_id')); ?>" /></td>
        </tr>
        
        <tr valign="top">
        <th scope="row">Sync Interval</th>
        <td>
            <select name="sync_interval">
                <option value="60" <?php selected(get_option('sync_interval'), '60'); ?>>Every Minute</option>
                <option value="300" <?php selected(get_option('sync_interval'), '300'); ?>>Every 5 Minutes</option>
                <option value="600" <?php selected(get_option('sync_interval'), '600'); ?>>Every 10 Minutes</option>
                <option value="900" <?php selected(get_option('sync_interval'), '900'); ?>>Every 15 Minutes</option>
		<option value="1200" <?php selected(get_option('sync_interval'), '1200'); ?>>Every 20 Minutes</option>
                <option value="1500" <?php selected(get_option('sync_interval'), '1500'); ?>>Every 25 Minutes</option>
                <option value="1800" <?php selected(get_option('sync_interval'), '1800'); ?>>Every 30 Minutes</option>
                <option value="3600" <?php selected(get_option('sync_interval'), '3600'); ?>>Every Hour</option>
            </select>
        </td>
        </tr>
    </table>
    
    <?php submit_button(); ?>
    <input name="webjoint_sync_now" type="submit" class="button-primary" value="Sync Now">
</form>
</div>
<?php
}

// Handle "Sync Now" button press
add_action('admin_init', 'webjoint_sync_now');

function webjoint_sync_now() {
    if(isset($_POST['webjoint_sync_now'])) {
        // Call your function that triggers immediate sync here.
        // This is just a placeholder. Please replace it with your actual sync function.
        $result = do_immediate_sync();
        if ($result === true) {
            add_action('admin_notices', 'sync_now_success_notice');
        } else {
            add_action('admin_notices', 'sync_now_error_notice');
        }
    }
}

function do_immediate_sync() {
    // Replace this function with your actual immediate sync function
    // This is a placeholder
    return true;
}

// Admin notices for "Sync Now"
function sync_now_success_notice() {
    ?>
    <div class="notice notice-success is-dismissible">
        <p><?php _e('Data sync completed successfully!', 'sample-text-domain'); ?></p>
    </div>
    <?php
}

function sync_now_error_notice() {
    ?>
    <div class="notice notice-error is-dismissible">
        <p><?php _e('Data sync failed. Please try again.', 'sample-text-domain'); ?></p>
    </div>
    <?php
}
?>










Here is the code for api-handler.php:
<?php

if (!defined('WPINC')) {
    die;
}

class WebJoint_API_Handler {

    private $api_key;
    private $facility_id;
    private $api_url;

    public function __construct() {
        $this->api_key = get_option('api_key');
        $this->facility_id = get_option('facility_id');
        $this->api_url = 'https://app.webjoint.com/prod/api/'; // Replace with actual API URL
    }

    private function send_request($endpoint, $method, $data = []) {
        $url = $this->api_url . $endpoint;
        $args = [
            'method' => $method,
            'headers' => [
                'x-api-key' => $this->api_key,
                'Content-Type' => 'application/json',
            ],
            'body' => json_encode($data),
        ];

        $response = wp_remote_request($url, $args);
        $response_code = wp_remote_retrieve_response_code($response);
        $response_body = json_decode(wp_remote_retrieve_body($response), true);

        if ($response_code >= 400) {
            // Handle error. You may want to throw an exception or return an error value
        }

        return $response_body;
    }

    public function create_user($user_data) {
        $endpoint = 'users'; // Replace with actual endpoint
        $method = 'POST';

        return $this->send_request($endpoint, $method, $user_data);
    }

    public function update_user($user_id, $user_data) {
        $endpoint = 'users/' . $user_id; // Replace with actual endpoint
        $method = 'PUT';

        return $this->send_request($endpoint, $method, $user_data);
    }

    public function create_order($order_data) {
        $endpoint = 'orders'; // Replace with actual endpoint
        $method = 'POST';

        return $this->send_request($endpoint, $method, $order_data);
    }

    public function push_cart($cart_data) {
        $endpoint = 'carts'; // Replace with actual endpoint
        $method = 'POST';

        return $this->send_request($endpoint, $method, $cart_data);
    }

    public function push_product($product_data) {
        $endpoint = 'products'; // Replace with actual endpoint
        $method = 'POST';

        return $this->send_request($endpoint, $method, $product_data);
    }
}













Here is the code for cart-handler.php:
<?php

if (!defined('WPINC')) {
    die;
}

class WebJoint_Cart_Handler {

    private $api_handler;

    public function __construct() {
        $this->api_handler = new WebJoint_API_Handler();
    }

    public function sync_cart() {
        $cart = WC()->cart->get_cart();

        foreach ($cart as $cart_item_key => $cart_item) {
            $product = $cart_item['data'];

            if ($product) {
                $product_data = [
                    'id' => $product->get_id(),
                    'name' => $product->get_name(),
                    'quantity' => $cart_item['quantity'],
                    // Add any other product data you want to sync
                ];

                $this->api_handler->push_product($product_data);
            }
        }
    }
}














Here is the code for cron-handler.php:
<?php

if (!defined('WPINC')) {
    die;
}

class WebJoint_Cron_Handler {

    private $sync_interval;

    public function __construct() {
        $this->sync_interval = get_option('webjoint_sync_interval', 'hourly');
    }

    public function setup_cron() {
        if (!wp_next_scheduled('webjoint_sync_event')) {
            wp_schedule_event(time(), $this->sync_interval, 'webjoint_sync_event');
        }
    }

    public function remove_cron() {
        if (wp_next_scheduled('webjoint_sync_event')) {
            wp_clear_scheduled_hook('webjoint_sync_event');
        }
    }

    public function run_sync() {
        // Add your synchronization logic here
        // This function will be called at the interval specified in $this->sync_interval
    }
}

add_action('wp', array('WebJoint_Cron_Handler', 'setup_cron'));
add_action('webjoint_sync_event', array('WebJoint_Cron_Handler', 'run_sync'));






Here is the code for data-mapper.php:
<?php

if (!defined('WPINC')) {
    die;
}

class WebJoint_Data_Mapper {

    public function map_product_data($product) {
        return array(
            'id' => $product->get_id(),
            'name' => $product->get_name(),
            'description' => $product->get_description(),
            'price' => $product->get_price(),
            // add more fields as needed
        );
    }

    public function map_user_data($user) {
        return array(
            'id' => $user->ID,
            'email' => $user->user_email,
            'username' => $user->user_login,
            'first_name' => $user->first_name,
            'last_name' => $user->last_name,
            // add more fields as needed
        );
    }

    public function map_order_data($order) {
        $mapped_order_data = array(
            'id' => $order->get_id(),
            'order_number' => $order->get_order_number(),
            'status' => $order->get_status(),
            'date_created' => $order->get_date_created()->date('Y-m-d H:i:s'),
            'total' => $order->get_total(),
            // add more fields as needed
        );

        $mapped_order_items = array();
        foreach ($order->get_items() as $item_id => $item) {
            $mapped_order_items[] = array(
                'product_id' => $item->get_product_id(),
                'quantity' => $item->get_quantity(),
                'subtotal' => $item->get_subtotal(),
                // add more fields as needed
            );
        }

        $mapped_order_data['items'] = $mapped_order_items;

        return $mapped_order_data;
    }
}








Here is the code for error-handler.php:
<?php

if (!defined('WPINC')) {
    die;
}

class WebJoint_Error_Handler {

    private $log_file_path;

    public function __construct() {
        $upload_dir = wp_upload_dir();
        $this->log_file_path = $upload_dir['basedir'] . '/webjoint_errors.log';
    }

    public function log_error($message) {
        $date = new DateTime();
        $log_message = $date->format('Y-m-d H:i:s') . ' - ' . $message . "\n";
        file_put_contents($this->log_file_path, $log_message, FILE_APPEND);
    }

    public function display_errors() {
        $errors = '';

        if (file_exists($this->log_file_path)) {
            $errors = file_get_contents($this->log_file_path);
        }

        if ($errors) {
            echo '<div class="error">';
            echo '<p><strong>WebJoint Errors:</strong></p>';
            echo '<p>' . nl2br($errors) . '</p>';
            echo '</div>';
        }
    }
}

function webjoint_admin_notices() {
    $error_handler = new WebJoint_Error_Handler();
    $error_handler->display_errors();
}
add_action('admin_notices', 'webjoint_admin_notices');











Here is the code for oder-handler.php:
<?php

if (!defined('WPINC')) {
    die;
}

class WebJoint_Order_Handler {

    private $api_handler;

    public function __construct() {
        $this->api_handler = new WebJoint_API_Handler();
    }

    public function create_order($order_id) {
        $order = wc_get_order($order_id);

        if ($order) {
            $order_data = [
                'id' => $order->get_id(),
                'status' => $order->get_status(),
                'total' => $order->get_total(),
                // Add any other order data you want to sync
            ];

            $this->api_handler->create_order($order_data);
        }
    }

    public function update_order($order_id) {
        $order = wc_get_order($order_id);

        if ($order) {
            $order_data = [
                'id' => $order->get_id(),
                'status' => $order->get_status(),
                'total' => $order->get_total(),
                // Add any other order data you want to sync
            ];

            $this->api_handler->update_order($order_data);
        }
    }
}










Here is the code for product handler.php:
<?php

if (!defined('WPINC')) {
    die;
}

class WebJoint_Product_Handler {

    private $api_handler;

    public function __construct() {
        $this->api_handler = new WebJoint_API_Handler();
    }

    public function create_product($product_id) {
        $product = wc_get_product($product_id);

        if ($product) {
            $product_data = [
                'id' => $product->get_id(),
                'name' => $product->get_name(),
                'price' => $product->get_price(),
                // Add any other product data you want to sync
            ];

            $this->api_handler->create_product($product_data);
        }
    }

    public function update_product($product_id) {
        $product = wc_get_product($product_id);

        if ($product) {
            $product_data = [
                'id' => $product->get_id(),
                'name' => $product->get_name(),
                'price' => $product->get_price(),
                // Add any other product data you want to sync
            ];

            $this->api_handler->update_product($product_data);
        }
    }
}












Here is the code for user-handler.php:
<?php

if (!defined('WPINC')) {
    die;
}

class WebJoint_User_Handler {

    private $api_handler;

    public function __construct() {
        $this->api_handler = new WebJoint_API_Handler();
    }

    public function create_user($user_id) {
        $user = get_userdata($user_id);

        if ($user) {
            $user_data = [
                'id' => $user->ID,
                'username' => $user->user_login,
                'email' => $user->user_email,
                // Add any other user data you want to sync
            ];

            $this->api_handler->create_user($user_data);
        }
    }

    public function update_user($user_id) {
        $user = get_userdata($user_id);

        if ($user) {
            $user_data = [
                'id' => $user->ID,
                'username' => $user->user_login,
                'email' => $user->user_email,
                // Add any other user data you want to sync
            ];

            $this->api_handler->update_user($user_data);
        }
    }
}












Here is the code for admin.js:
(function($) {
    'use strict';

    $(document).ready(function() {
        $('#webjoint-settings-form').on('submit', function(e) {
            e.preventDefault();

            var api_key = $('#api_key').val();
            var facility_id = $('#facility_id').val();
            var sync_frequency = $('#sync_frequency').val();

            $.ajax({
                url: '/wp-json/webjoint/v1/settings',
                method: 'POST',
                beforeSend: function(xhr) {
                    xhr.setRequestHeader('X-WP-Nonce', webjointAdmin.nonce);
                },
                data: {
                    api_key: api_key,
                    facility_id: facility_id,
                    sync_frequency: sync_frequency
                }
            }).done(function(response) {
                // Handle success
                if (response.success) {
                    alert('Settings saved successfully!');
                } else {
                    alert('There was an error saving your settings.');
                }
            }).fail(function() {
                // Handle error
                alert('There was an error sending your request.');
            });
        });
    });
})(jQuery);