Ecommerce integration

This guide is for the use case of an integrator creating a front facing ecommerce website which connects to Webjoint API.

Postman collection​

All endpoints needed for the integration are included in a postman collection:

Run in Postman

You can import the collection into your Postman and all endpoints will be runnable based on the default sandbox environment

Postman environment​

The public Postman documentation uses a generic sandbox environment. If you need a private sandbox, let us know and we will provide a private Postman environment

Authentication​

Some ecommerce endpoints are public, meaning you don't need to send any authentication for them. This is true for endpoints such as /theme because this endpoint returns information about the styling of the ecommerce for which the user doesn't have to be logged in - this is public information. However, other endpoints such as /addToCart do require authentication because these endpoints are called in the name of a user - a specific user is adding items to cart. For such endpoints you have 2 choices:

Use webjoint users by providing a login form which sends username/password to webjoint /login endpoint which would then give you a token for that user and you would then authenticate calls such as /addToCart via this token. More on this here
If you want to use your own user database, this would be the workflow:
when you sign-up a new customer via your ecommerce, create a webjoint user via a server to server API call by using POST /customers - webjoint API will return a User ID which you would then store in your database so that you are able to correlate your own users and webjoint users
make "proxy" endpoints for webjoint endpoints such as /addToCart. Your own /addToCart would authenticate users in your own way, and then you would call webjoint /addToCart from your server using your x-api-key and x-for-user-id (this would be the User ID you stored in your database)
Workflow​

The following describes the sequence of requests that needs to happen until the order is submitted. Not evey endpoint is mentioned here - only the general workflow. Postman collection has each enpoint documented.

isDeliverable - For delivery orders, you need to collect the shipping address of the customer and send it to this endpoint. The endpoint will return a list of available delivery zones for this address. This endpoint is public, meaning the user doesn't have to be logged in and the call doesn't have to be authorized
products/active - send the list of available delivery zones to this endpoint to get a list of products. Each product has a list of variants. When adding items to cart, it is variants that are added to cart / sold, not products. Products act more as wrappers for variants. This endpoint is also public
Create cart - When a user adds something to cart at your ecommerce, you need to first create a cart in Webjoint. This endpoint will return the cart and you need to store the cart ID locally and use the cart ID for /addToCart calls. Each cart belongs to a user. This endpoint is also public, meaning you don't have to authorize this call - this would create an anonymous cart. You can either authenticate this call to tell webjoint for which user you are creating the cart for. or you can create an anonymous cart and then later call the /own endpoint to attach a customer to the cart. The cart eventually needs to be attached to a customer before it is submitted.
Add to cart - Send a variant ID to be added to the cart along with a quantity. The quantity specified is not cumulative. If you add 1 item to cart, and then another 1, the resulting quantity in cart will be 1, not 2. This means that we only have the one endpoint for incrementing and decrementing a quantity - simply send the final desired quantity. This call is public since we allow adding to cart before the user logs in
getDeliveryTimingAvailability - This endpoint will tell you which delivey timings are available for the cart (Asap and/or Scheduled). Delivery timing has to be selected and we use this endpoint to disable the options that are unavailable. This call has to be authenticated since this is called on the checkout page in our ecommerce, and the user has to log in to see the checkout page
setDeliveryTiming - this is mandatory and sets the delivey timing for the cart. This call has to be authenticated since it's called in checkout
payment - this is mandatory and sets the payment type for the cart. This call has to be authenticated since it's called in checkout
Submit cart - this is the final step and has to be authenticated since it's called in checkout