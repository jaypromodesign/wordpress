API URL​

Production (live): https://app.webjoint.com/prod/api/
Development (sandbox): https://app.webjoint.xyz/test/api/

CAUTION

facilityId is a required query parameter for most endpoints. It is best to include facilityId with every API request

Authorization​

You will be given a private API key, which you need to send in the x-api-key header. Please keep it safe.

Authentication​

Some endpoints perform actions which are done in the name of a user in the system. For example, the request to create a shop cart creates the cart for the logged in user. Since api integrators don't need to login and use API keys instead, you can use x-for-user-id header for this purpose. The value should be ID of the user for which you are sending the request. However, it should be obvious that you shouldn't store your API key in a client application, but only use it for server to server communication.

If you are building an ecommerce frontend application, there is more information here

Pagination​

To paginate results in LIST endpoints, use the range query parameter. Range is defined as a tuple where the first element is the start record and the second element is the end record. For example &range=[0, 9] will give you first 10 results. &range=[10, 19] would give you the second 10. If you don't send the range parameter, you will get the first 20 elements. Maximum range is 100. The API returns the total number of records available in the content-range response header.













Ecommerce integration

This guide is for the use case of an integrator creating a front facing ecommerce website which connects to Webjoint API.

Authentication​

Some ecommerce endpoints are public, meaning you don't need to send any authentication for them. This is true for endpoints such as /theme because this endpoint returns information about the styling of the ecommerce for which the user doesn't have to be logged in - this is public information. However, other endpoints such as /addToCart do require authentication because these endpoints are called in the name of a user - a specific user is adding items to cart. For such endpoints you have 2 choices:

Use webjoint users by providing a login form which sends username/password to webjoint /login endpoint which would then give you a token for that user and you would then authenticate calls such as /addToCart via this token. 

If you want to use your own user database, this would be the workflow:
when you sign-up a new customer via your ecommerce, create a webjoint user via a server to server API call by using POST /customers - webjoint API will return a User ID which you would then store in your database so that you are able to correlate your own users and webjoint users

make "proxy" endpoints for webjoint endpoints such as /addToCart. Your own /addToCart would authenticate users in your own way, and then you would call webjoint /addToCart from your server using your x-api-key and x-for-user-id (this would be the User ID you stored in your database)
Workflow​

The following describes the sequence of requests that needs to happen until the order is submitted. Not evey endpoint is mentioned here - only the general workflow. Postman collection has each enpoint documented.

isDeliverable - For delivery orders, you need to collect the shipping address of the customer and send it to this endpoint. The endpoint will return a list of available delivery zones for this address. This endpoint is public, meaning the user doesn't have to be logged in and the call doesn't have to be authorized

products/active - send the list of available delivery zones to this endpoint to get a list of products. Each product has a list of variants. When adding items to cart, it is variants that are added to cart / sold, not products. Products act more as wrappers for variants. This endpoint is also public

Create cart - When a user adds something to cart at your ecommerce, you need to first create a cart in Webjoint. This endpoint will return the cart and you need to store the cart ID locally and use the cart ID for /addToCart calls. Each cart belongs to a user. This endpoint is also public, meaning you don't have to authorize this call - this would create an anonymous cart. You can either authenticate this call to tell webjoint for which user you are creating the cart for. or you can create an anonymous cart and then later call the /own endpoint to attach a customer to the cart. The cart eventually needs to be attached to a customer before it is submitted.

Add to cart - Send a variant ID to be added to the cart along with a quantity. The quantity specified is not cumulative. If you add 1 item to cart, and then another 1, the resulting quantity in cart will be 1, not 2. This means that we only have the one endpoint for incrementing and decrementing a 

quantity - simply send the final desired quantity. This call is public since we allow adding to cart before the user logs in

getDeliveryTimingAvailability - This endpoint will tell you which delivey timings are available for the cart (Asap and/or Scheduled). Delivery timing has to be selected and we use this endpoint to disable the options that are unavailable. This call has to be authenticated since this is called on the checkout page in our ecommerce, and the user has to log in to see the checkout page

setDeliveryTiming - this is mandatory and sets the delivey timing for the cart. This call has to be authenticated since it's called in checkout

payment - this is mandatory and sets the payment type for the cart. This call has to be authenticated since it's called in checkout

Submit cart - this is the final step and has to be authenticated since it's called in checkout














Users

Webjoint authenticates client application users via JWT tokens. For server to server user authentication, you can use your API key to authenticate users via x-for-user-id. Authenticating users via your API key is much simpler but cannot be used in client applications because you would have to store your API key in the client application which is a security concern.

Client application authentication of webjoint users​

Provide a login form with email and password fields and send the request to POST /users/login with JSON body:
{
    "email":"daniel@webjoint.com",
    "password":"{password}"
}

API will return an IdToken and a RefreshToken, which you need to use to authenticate further requests. Store both of them in the browser for later use (for example via localStorage)

Use the Authorization header with the value of Bearer {IdToken}
Authorization: Bearer {IdToken}

IdToken is short lived and will expire after an hour of no activity. In this case, the API will return a 401 response. You then need to send a request to POST /users/refresh with the RefreshToken in the JSON body :
{ 
    "refreshToken": "{RefreshToken}"
}
This will give you a new IdToken and a new RefreshToken which you need to store in the browser again and use the new IdToken for further requests











Webjoint API

AUTHORIZATION: API Key
Key: x-api-key
Value: gMsFqkAOAz6gV67nxaEH

Basic

AUTHORIZATION: API Key

GET: Get Customer
https://app.webjoint.xyz/test/api/customers/3

This is used to fetch information about the customer, such as the amount of loyalty points that they have

AUTHORIZATION: API Key

HEADERS
x-company-id: 21

Curl example: curl --location 'https://app.webjoint.xyz/test/api/customers/3' \
--header 'x-company-id: 21'






GET: Orders
https://app.webjoint.xyz/test/api/orders?facilityId=34

This is used to fetch information about the customer, such as the amount of loyalty points that they have

AUTHORIZATION: API Key

HEADERS
x-company-id: 21

PARAMS
facilityId: 34

Curl example: curl --location 'https://app.webjoint.xyz/test/api/orders/21-21-3-2891?x-company-id=21'







GET: Order by ID
https://app.webjoint.xyz/test/api/orders/21-21-3-2891?x-company-id=21

This is used to fetch information about the customer, such as the amount of loyalty points that they have

AUTHORIZATION: API Key

PARAMS
x-company-id: 21

Curl example: curl --location 'https://app.webjoint.xyz/test/api/orders/21-21-3-2891?x-company-id=21'








GET: Facilities
https://app.webjoint.xyz/test/api/facilities

This is used to fetch information about the customer, such as the amount of loyalty points that they have

AUTHORIZATION: API Key

HEADERS
x-company-id: 21

Curl example: curl --location 'https://app.webjoint.xyz/test/api/facilities' \
--header 'x-company-id: 21'







GET: Facility by ID
https://app.webjoint.xyz/test/api/facilities/34

This is used to fetch information about the customer, such as the amount of loyalty points that they have

AUTHORIZATION: API Key

HEADERS
x-company-id: 21

Curl example: curl --location 'https://app.webjoint.xyz/test/api/facilities/34' \
--header 'x-company-id: 21'






Ecommerce Integration

AUTHORIZATION: API Key

Required Sequence

Endpoints in this folder are all required and have to be run in the sequence they are presented.

1. "theme" returns payment methods which later need to be used for the "payment" endpoint

2. "isDeliverable" returns available zones (based on shipping address that needs to be sent in the request body)

3. Available zones are then sent to "products/active" which returns the list of available variants that can be added to cart

4. "Create cart" creates the cart

5. "Add to cart" to add products to cart

6. "getDeliveryTimingAvailability" returns available delivery timings which are needed for "setDeliveryTiming"

7. "setDeliveryTiming" to set the delivery timing for the cart

8. "payment" to set the payment method for the cart (based on available payment methods from "theme")

9. "Create customer" in the webjoint platform because orders need to have customers in our system (no need for usernames and passwords, only customer data)

10. "own" to attach the cart to the customer we created

11. "Submit cart" which is the final step








AUTHORIZATION: API Key

GET: theme
https://app.webjoint.xyz/test/api/companies/theme

This is used to get settings for the shop which are set in admin.

One of the important parts of the response are available payment methods which later need to be selected in checkout "$response.facilities[i].paymentMethods"

HEADERS
x-company-id: 21


Curl example: curl --location 'https://app.webjoint.xyz/test/api/companies/theme' \
--header 'x-company-id: 21'

Example json response: {
  "theme": {
    "color": "#4A90E2",
    "secondaryColor": "#4A90E2",
    "fontsUrl": null,
    "categoryViewTemplate": "Default",
    "productCarouselTemplate": "Default",
    "appBarTemplate": "Standard",
    "feedTemplate": "Default",
    "feedListTemplate": "Default",
    "headerText": null,
    "headerSubText": null,
    "headerTemplate": "Standard",
    "footerTemplate": "Standard",
    "footerText": null,
    "css": null,
    "primaryFont": "Lato",
    "secondaryFont": "Poppins",
    "productInfo": null,
    "infoWindow": null,
    "removeAgeGate": false,
    "ageGateTitleText": "Are you of legal age to purchase cannabis?",
    "ageGateSecondaryText": "Adult-use customers must be over 21, and medical customers must be over 18.",
    "homeUrl": null,
    "outOfDeliveryTitle": "We don't currently deliver to your area.",
    "outOfDeliveryText": "Enter your email or phone number to get notified when we expand to your location!",
    "outOfDeliveryThankYouTitle": "Thank you!",
    "outOfDeliveryThankYouText": "We will let you know when we get there!",
    "captureContact": false,
    "headerBackgroundImage": {},
    "headerMobileBackgroundImage": {},
    "footerLogoImage": {},
    "ageGateImage": {}
  },
  "shopConfig": {
    "googleAnalytics": null,
    "googleTagManagerId": "GTM-PZX4ZZ8",
    "customScript": null,
    "customHeadScript": null,
    "termsOfUse": null,
    "expressFullMenuSwitchText": null,
    "fullMenuExpressSwitchText": null,
    "enableAutogeneratedContentsForBundleProducts": false,
    "displayPriceBreaksAs": "Dollar Amount Saved",
    "showNextDeal": false,
    "enableFeed": false,
    "sendEmailsForNewCustomers": true,
    "sendEmailsForMissedOpportunities": true,
    "useHashtag": true
  },
  "logo": {},
  "favicon": {},
  "strains": [],
  "brands": [
    {
      "id": 1,
      "name": "Moxie"
    }
  ],
  "tags": [
    {
      "companyId": 21,
      "id": 186,
      "value": "tag1"
    }
  ],
  "tiers": [
    {
      "companyId": 21,
      "id": 1,
      "value": "tier1"
    }
  ],
  "cannabinoidRanks": [
    {
      "type": "THC",
      "maxCannabinoidRank": 60,
      "units": [
        "Percentage"
      ]
    },
    {
      "type": "CBD",
      "maxCannabinoidRank": 2,
      "units": [
        "Gram"
      ]
    }
  ],
  "css": null,
  "template": {
    "footerTemplate": "Standard",
    "headerTemplate": "Standard"
  },
  "fonts": "@font-face {\n  font-family: 'Lato';\n  font-style: normal;\n  font-weight: 400;\n  src: url(https://fonts.gstatic.com/s/lato/v24/S6uyw4BMUTPHjx4wWw.ttf) format('truetype');\n}\n@font-face {\n  font-family: 'Lato';\n  font-style: normal;\n  font-weight: 700;\n  src: url(https://fonts.gstatic.com/s/lato/v24/S6u9w4BMUTPHh6UVSwiPHA.ttf) format('truetype');\n}\n@font-face {\n  font-family: 'Poppins';\n  font-style: normal;\n  font-weight: 400;\n  src: url(https://fonts.gstatic.com/s/poppins/v20/pxiEyp8kv8JHgFVrJJfedw.ttf) format('truetype');\n}\n@font-face {\n  font-family: 'Poppins';\n  font-style: normal;\n  font-weight: 500;\n  src: url(https://fonts.gstatic.com/s/poppins/v20/pxiByp8kv8JHgFVrLGT9Z1xlEA.ttf) format('truetype');\n}\n@font-face {\n  font-family: 'Poppins';\n  font-style: normal;\n  font-weight: 600;\n  src: url(https://fonts.gstatic.com/s/poppins/v20/pxiByp8kv8JHgFVrLEj6Z1xlEA.ttf) format('truetype');\n}\n@font-face {\n  font-family: 'Poppins';\n  font-style: normal;\n  font-weight: 700;\n  src: url(https://fonts.gstatic.com/s/poppins/v20/pxiByp8kv8JHgFVrLCz7Z1xlEA.ttf) format('truetype');\n}\n",
  "company": {
    "id": 21,
    "name": "New Local",
    "email": "localdanielhost@yopmail.com",
    "phone": null,
    "allowUnverifiedUsers": false,
    "disableMMICusers": true,
    "allowDoctorsRec": true,
    "isBrand": false,
    "inventoryManagement": true,
    "deliveryOperation": true,
    "eCommerce": true,
    "cannabisShop": true,
    "numberOfCouponsPerOrder": 3,
    "combineLoyaltyPointsAndCoupons": false,
    "loyaltyProgram": false,
    "loyaltyPointWorth": null,
    "socialMedia": {
      "weedmaps": "",
      "instagram": "",
      "facebook": "",
      "twitter": ""
    },
    "shopLinks": [],
    "requireLicenseId": false,
    "requireResidencyVerification": false,
    "retailers": [],
    "showNotAvailableProducts": true,
    "premiumShopEnabled": true,
    "nativeShopEnabled": true,
    "isKindtapExclusivePaymentMethod": false,
    "kindtapHostname": "123",
    "discountsCanExceedMinimumOrder": false,
    "allowWebjointAccounts": true,
    "isBerbixEnabled": false,
    "aeropay": {
      "merchantId": null,
      "location": null,
      "merchantLocationId": null,
      "merchantLocationUUID": null
    },
    "validPaymentProcessing": [
      "Kindtap"
    ],
    "userwerk": {
      "enable": false,
      "campaignKey": null
    }
  },
  "signUpImage": {},
  "isShopClosed": {
    "closed": false
  },
  "facilities": [
    {
      "companyId": 21,
      "id": 21,
      "name": "New Local",
      "email": "localdanielhost@yopmail.com",
      "emailVerified": false,
      "phone": "",
      "orderPrepTime": 0,
      "creditFee": 0,
      "licenseType": "DispensaryWithDelivery",
      "type": "Medical and adult",
      "customerType": [
        "AdultUse",
        "Medical"
      ],
      "autoDispatch": true,
      "paused": false,
      "metrc": false,
      "timeZone": "America/Los_Angeles",
      "adultUseLimits": false,
      "medicalUseLimits": false,
      "closeShopOutsideOfBusinessHours": false,
      "metrcLastSyncDate": null,
      "metrcSyncInProgress": false,
      "metrcSyncInProgressLastErrorDate": null,
      "metrcSyncCurrentDateStartedAt": null,
      "metrcUserId": 20092,
      "automaticallyImportManifests": true,
      "metrcBudtendersWithoutReportSalesPermission": [],
      "metrcShiftIssuesAutoFix": false,
      "allowPickupOutsideOfBusinessHours": false,
      "license": {
        "number": null,
        "expires": null,
        "start": "2023-03-16T23:00:00.000Z",
        "image": {},
        "backImage": {
          "key": null
        }
      },
      "taxSettings": {
        "sales": 0,
        "excise": 0,
        "businessMedical": 0,
        "businessDrRec": 0,
        "businessAdult": 0,
        "useSalesTax": true,
        "useExciseTax": true,
        "useBusinessTax": true,
        "useDeliveryTax": true
      },
      "address": {
        "country": "US",
        "state": "NM",
        "county": "Sandoval",
        "city": "Bernalillo",
        "neighborhood": "Palms",
        "street": "South Camino Del Pueblo",
        "number": "413",
        "apartment": "",
        "zip": "87004",
        "latLng": {
          "lat": 35.3117345,
          "lng": -106.5478415
        }
      },
      "businessHours": {
        "monday": {
          "opensAt": "00:00 AM",
          "closesAt": "00:00 AM",
          "isOpen": false
        },
        "tuesday": {
          "opensAt": "00:00 AM",
          "closesAt": "00:00 AM",
          "isOpen": false
        },
        "wednesday": {
          "opensAt": "00:00 AM",
          "closesAt": "00:00 AM",
          "isOpen": false
        },
        "thursday": {
          "opensAt": "00:00 AM",
          "closesAt": "00:00 AM",
          "isOpen": false
        },
        "friday": {
          "opensAt": "00:00 AM",
          "closesAt": "00:00 AM",
          "isOpen": false
        },
        "saturday": {
          "opensAt": "00:00 AM",
          "closesAt": "00:00 AM",
          "isOpen": false
        },
        "sunday": {
          "opensAt": "00:00 AM",
          "closesAt": "00:00 AM",
          "isOpen": false
        }
      },
      "adultLimit": {
        "flowerGrams": null,
        "concentrateGrams": null,
        "plantsUnits": null,
        "ediblesMilligrams": 800
      },
      "medicalLimit": {
        "flowerGrams": null,
        "concentrateGrams": null,
        "plantsUnits": null,
        "ediblesMilligrams": 800
      },
      "scheduledDeliverySettings": {
        "scheduledOnly": false,
        "scheduledDelivery": true,
        "exclusiveMenus": false,
        "sameDay": true,
        "maxOrdersPerHour": 10,
        "allowSameDayUntil": "23:00:00",
        "defaultMenu": "Express",
        "expressMenuLabel": "Express",
        "fullMenuLabel": "Full Menu",
        "allowSameDayInterval": {
          "start": "00:00:00",
          "end": "00:00:00"
        }
      },
      "cova": {
        "locationId": null,
        "deliveryLocationId": null,
        "roomId": null,
        "roomName": null,
        "deliveryRoomId": null,
        "deliveryRoomName": null,
        "salesId": null,
        "salesName": null,
        "exciseId": null,
        "exciseName": null,
        "businessId": null,
        "businessName": null,
        "deliveryFeeItemId": null,
        "deliveryFeeAmount": 0,
        "kindtapServiceFeeItemId": null
      },
      "paymentMethods": [
        {
          "companyId": 21,
          "facilityId": 21,
          "id": 43,
          "label": "Cash",
          "description": null,
          "reportAs": "Cash",
          "active": true,
          "deleted": false,
          "priority": 1,
          "availableFor": "Both",
          "paymentProcessing": null,
          "_id": "21-21-43"
        },
        {
          "companyId": 21,
          "facilityId": 21,
          "id": 44,
          "label": "Debit Card",
          "description": null,
          "reportAs": "Card",
          "active": true,
          "deleted": false,
          "priority": 2,
          "availableFor": "Both",
          "paymentProcessing": null,
          "_id": "21-21-44"
        },
        {
          "companyId": 21,
          "facilityId": 21,
          "id": 45,
          "label": "Pay with KindTap",
          "description": "<p>Sign-up and pay now with your bank account or apply for credit. Thanks KindTap!</p>",
          "reportAs": "Kindtap",
          "active": true,
          "deleted": false,
          "priority": 3,
          "availableFor": "Both",
          "paymentProcessing": "Kindtap",
          "_id": "21-21-45"
        }
      ],
      "isOpened": true
    }
  ]
}







POST: isDeliverable
https://app.webjoint.xyz/test/api/companies/isDeliverable

Sending an address gives a list of available delivery zones in the response

HEADERS
x-company-id: 21

Body: raw (json)
{
    "number": "2930",
    "street": "Westwood Boulevard",
    "neighborhood": "Palms",
    "city": "Los Angeles",
    "county": "Los Angeles",
    "state": "CA",
    "country": "US",
    "zip": "90064",
    "latLng": {
        "lat": 34.031292,
        "lng": -118.421308
    }
}

Curl example: curl --location 'https://app.webjoint.xyz/test/api/companies/isDeliverable' \
--header 'x-company-id: 21' \
--data '{
    "number": "2930",
    "street": "Westwood Boulevard",
    "neighborhood": "Palms",
    "city": "Los Angeles",
    "county": "Los Angeles",
    "state": "CA",
    "country": "US",
    "zip": "90064",
    "latLng": {
        "lat": 34.031292,
        "lng": -118.421308
    }
}'






GET: products/active
https://app.webjoint.xyz/test/api/products/active?source=Website&orderType=Delivery&cutoff=10&showAll=false&express=false&coveringZoneIds=

Send a list of available delivery zones (that we got from isDeliverable endpoint) to get a list of available products for those zones

HEADERS
x-company-id: 21

PARAMS
source: Website
this should always be Website

orderType: Delivery
this can be Delivery or Pickup

cutoff: 10
If cuttoff is 10, each categoy will return first 10 products

showAll: false
if false, /products/active will not return products that are not available

express: false
if the user is browsing express menu, express=true should be sent

coveringZoneIds
this is a list of available zones that we got from /isDeliverable. Each ID is a composite key that can be constructed like this: ${deliveryZone.companyId}-${deliveryZone.facilityId}-${deliveryZone.id}


Curl example: curl --location 'https://app.webjoint.xyz/test/api/products/active?source=Website&orderType=Delivery&cutoff=10&showAll=false&express=false&coveringZoneIds=' \
--header 'x-company-id: 21'








POST: Create cart
https://app.webjoint.xyz/test/api/carts/Website/Delivery?orderSource=Website&type=Delivery

To add a product to cart, you first need to create a cart with this endpoint. This endpoint will return the cart object, which you need to save locally and then next time you add another item to cart, you call addToCart with the cartId you got from this endpoint

BODY:
Address of the customer needs to be added to the body

AUTHORIZATION: API Key

HEADERS
x-company-id: 21

PARAMS
orderSource: Website
this should always be Website

type: Delivery
"Delivery" or "Pickup"

Body: raw (json)
{
    "number": "2930",
    "street": "Westwood Boulevard",
    "neighborhood": "Palms",
    "city": "Los Angeles",
    "county": "Los Angeles",
    "state": "CA",
    "country": "US",
    "zip": "90064",
    "latLng": {
        "lat": 34.031292,
        "lng": -118.421308
    }
}


Curl example: curl --location 'https://app.webjoint.xyz/test/api/carts/Website/Delivery?orderSource=Website&type=Delivery' \
--header 'x-company-id: 21' \
--data '{
    "number": "2930",
    "street": "Westwood Boulevard",
    "neighborhood": "Palms",
    "city": "Los Angeles",
    "county": "Los Angeles",
    "state": "CA",
    "country": "US",
    "zip": "90064",
    "latLng": {
        "lat": 34.031292,
        "lng": -118.421308
    }
}'






POST: Add to cart
https://app.webjoint.xyz/test/api/carts//addToCart//1?preferRooms=false&deliveryTiming=Scheduled

To add a product to cart, you first need to create a cart with this endpoint. This endpoint will return the cart object, which you need to save locally and then next time you add another item to cart, you call addToCart with the cartId you got from this endpoint

URL PARAMS:
cartId - this is the cart id, which is a composite id, for example 4-1-3034868. It is constructed like this: ${companyId}-${customerId}-${cart.id}

variantOrBundleId - When adding items to cart, we add variants to cart, not products. This should be the ID of the variant that we are adding to cart - eg. 4-76884-85702. This is a composite ID constructed with ${companyId}-${productId}-${variantId}. Other than variants, we can also add bundle items to cart which we treat differently. To add a bundle, the composite id is constructed differently: ${companyId}-${productId}. This is because bundles don't have variants

quantity - the quantity that you want to add to cart. This is not cumulative. If you already have 1 in cart and you send 1, you will not end up with 2 items in cart, but 1

AUTHORIZATION: API Key

HEADERS
x-company-id: 21

PARAMS
preferRooms: false
If scheduling is enabled in admin settings and the user is in express menu, this should be true

deliveryTiming: Scheduled
This is optional. This should be sent if scheduling is enabled and exclusive menus are enabled in facility settings. If the user is in express menu, the value should be "Asap", otherwise "Scheduled". Please note that if you set this to Asap, you might get an error "cant items cannot be fulfilled" because of many reasons such as shop being closed at the moment. Scheduled

Curl example: curl --location --request POST 'https://app.webjoint.xyz/test/api/carts//addToCart//1?preferRooms=false&deliveryTiming=Scheduled' \
--header 'x-company-id: 21'







GET: getDeliveryTimingAvailability
https://app.webjoint.xyz/test/api/carts//getDeliveryTimingAvailability

In checkout, the user should select delivery timing, which can be either ASAP or Scheduled. This endpoint will tell you which of the 2 options are available since this depends on what the user bought.

URL PARAMS:
cartId - this is the composite ID of the cart - eg. "4-1-3034870". The ID is constructed like this: ${companyId}-${customerId}-${cart.id}

AUTHORIZATION: API Key

HEADERS
x-company-id: 21

Curl example: curl --location 'https://app.webjoint.xyz/test/api/carts//getDeliveryTimingAvailability' \
--header 'x-company-id: 21'





POST: setDeliveryTiming
https://app.webjoint.xyz/test/api/carts//setDeliveryTiming/

This is used to set the cart delivery timing (ASAP or Scheduled). Asap is default, and if Scheduled is sent, then we also need to send the date/time for which to schedule for

URL PARAMS:
cartId - eg. "4-1-3034872". Composite ID is constructed like this: ${companyId}-${customerId}-${cart.id} 

deliveryTiming - "Asap" or "Scheduled"

If you send "Scheduled", you will get available time slots in the response
The response is an array of 2 elements $response[0] is the cart, $response[1] is an array of available time slots (dates and times). The object looks like this:
[{date: "2022-09-12", timeslots: []}, {date: "2022-09-13", timeslots: []}]

Based on this data, we use 2 dropdowns in our shop - one for the date and one for the time. After the user has selected the slot, you need to send the following in the request body to set the timeslot:
{"startDate":"2022-09-13T07:00:00.000Z","endDate":"2022-09-13T10:00:00.000Z"}

AUTHORIZATION: API Key

HEADERS
x-company-id: 21

Curl example: curl --location 'https://app.webjoint.xyz/test/api/carts//setDeliveryTiming/' \
--data '{
    "startDate": "2022-09-13T07:00:00.000Z",
    "endDate": "2022-09-13T10:00:00.000Z"
}'







PUT: payment
https://app.webjoint.xyz/test/api/carts//payment

This is used to set the payment method of the cart. This is mandatory and if the cart is submitted without setting the payment method, submit will give an error "Please select payment type". An array should be sent in the body because we support split payments. If one payment type is used, then the array should have 1 element

REQUEST BODY:
[{"id":628,"amount":86.15}]

* The "id" is the id of the payment method. You can get the list of available payment methods from GET /companies/theme ($response.facilities[i].paymentMethods)

* amount is sent because we support split payments. In case of split payments, the request body should include each payment with the amount

AUTHORIZATION: API Key

HEADERS
x-company-id: 21

Body: raw (json)
[
    {
        "id": ,
        "amount": 
    },
    {
        "id": ,
        "amount": 
    }
]

curl example: curl --location --request PUT 'https://app.webjoint.xyz/test/api/carts//payment' \
--header 'x-company-id: 21' \
--data '[
    {
        "id": ,
        "amount": 
    },
    {
        "id": ,
        "amount": 
    }
]'







POST: Create Customer
https://app.webjoint.xyz/test/api/customers?facilityId=34

For image properties, such as selfie, idcard, and mmic, you need to send the object list this:

StartFragment (json):
"selfie": {
    "key": "https://app.webjoint.xyz/uploads/User/60697/selfie/D100AE83600822E9B5DA3AD642600B0A"
},

EndFragment:
The "key" should be an URL to the image

AUTHORIZATION: API Key

HEADERS
x-company-id: 21

PARAMS
facilityId: 34

Body: raw (json)
{
    "verified": true,
    "userType": "Medical",
    "name": "Test Customer",
    "selfie": {
        "key": "https://app.webjoint.xyz/uploads/User/60697/selfie/D100AE83600822E9B5DA3AD642600B0A"
    },
    "idcard": {
        "image": {
            "key": "https://app.webjoint.xyz/uploads/User/60697/selfie/D100AE83600822E9B5DA3AD642600B0A"
        },
        "number": "1234",
        "expires": "2036-09-18T22:00:00.000Z"
    },
    "mmic": {
        "image": {
            "key": "https://app.webjoint.xyz/uploads/User/60697/selfie/D100AE83600822E9B5DA3AD642600B0A"
        },
        "number": "1234",
        "expires": "2039-08-31T22:00:00.000Z"
    },
    "email": "amusetestcustomer@mailinator.com",
    "phone": "+1231241155",
    "birthday": "1925-09-02T23:00:00.000Z",
    "address": {
        "number": "2930",
        "street": "Westwood Boulevard",
        "neighborhood": "Palms",
        "city": "Los Angeles",
        "county": "Los Angeles",
        "state": "CA",
        "country": "US",
        "zip": "90064",
        "latLng": {
            "lat": 34.031292,
            "lng": -118.421308
        },
        "apartment": "apt 1"
    },
    "gender": "Male",
    "notes": "test notes"
}

Curl example: curl --location 'https://app.webjoint.xyz/test/api/customers?facilityId=34' \
--header 'x-company-id: 21' \
--data-raw '{
    "verified": true,
    "userType": "Medical",
    "name": "Test Customer",
    "selfie": {
        "key": "https://app.webjoint.xyz/uploads/User/60697/selfie/D100AE83600822E9B5DA3AD642600B0A"
    },
    "idcard": {
        "image": {
            "key": "https://app.webjoint.xyz/uploads/User/60697/selfie/D100AE83600822E9B5DA3AD642600B0A"
        },
        "number": "1234",
        "expires": "2036-09-18T22:00:00.000Z"
    },
    "mmic": {
        "image": {
            "key": "https://app.webjoint.xyz/uploads/User/60697/selfie/D100AE83600822E9B5DA3AD642600B0A"
        },
        "number": "1234",
        "expires": "2039-08-31T22:00:00.000Z"
    },
    "email": "amusetestcustomer@mailinator.com",
    "phone": "+1231241155",
    "birthday": "1925-09-02T23:00:00.000Z",
    "address": {
        "number": "2930",
        "street": "Westwood Boulevard",
        "neighborhood": "Palms",
        "city": "Los Angeles",
        "county": "Los Angeles",
        "state": "CA",
        "country": "US",
        "zip": "90064",
        "latLng": {
            "lat": 34.031292,
            "lng": -118.421308
        },
        "apartment": "apt 1"
    },
    "gender": "Male",
    "notes": "test notes"
}'







PUT: own
https://app.webjoint.xyz/test/api/carts//own

Carts can be created even when the user is not logged in - this would be regarded as an anonymous cart. Later, if a user logs in, this endpoint is used to change the "ownership" of the cart to the logged in user

URL PARAMS:
cartId- eg. "4-1-0". Composite ID is constructed like this: ${companyId}-${customerId}-${cart.id}

AUTHORIZATION: API Key

HEADERS
x-company-id: 21

x-for-user-id: 3

Curl example: curl --location --request PUT 'https://app.webjoint.xyz/test/api/carts//own' \
--header 'x-company-id: 21' \
--header 'x-for-user-id: 3'






PUT: Submit cart
https://app.webjoint.xyz/test/api/carts//submit

AUTHORIZATION: API Key

HEADERS
x-company-id: 21

x-for-user-id: 3


Curl example: curl --location --request PUT 'https://app.webjoint.xyz/test/api/carts//submit' \
--header 'x-company-id: 21' \
--header 'x-for-user-id: 3'